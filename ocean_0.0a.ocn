Ocean::Syntax ocean-grammar_0.0a {
  main = (rule cut)* eof
  rule = eol spc? symver spc '=' (spc expr)+
  expr = symver | focus | group | any | not | charclass | string | alt | counted
  group = '(' cut expr? cut (spc expr cut)* ')'
  any = '.' cut
  not = '!' cut spc? expr
  charclass = '[' cut classchars ']'
  classchars = '^'? ']'? (escape | '\\' cut noescchar | [^]])*
  string = '\'' cut stringchars '\''
  stringchars = (escape | '\\' cut noescchar | [^'])*
  escape = '\\' (escchar | 'x' cut hexchar hexchar)
  hexchar = [0-9a-f]
  escchar = [afnrtv]
  noescchar = !escchar .
  alt = expr spc '|' cut spc expr
  counted = expr spc? countchar cut
  countchar = [?*+]
  symver = symbol cut version?
  symbol = [A-Za-z] [-.A-Za-z0-9]*
  version = '_' cut [-+.A-Za-z0-9]+
  spc = [\n\r\t ]+
  eol = '\r\n' | '\n' | '\r'
  eof = !.
};

Ocean::Syntax ocean-syntax_0.0a : ocean-grammar ocg {
  main = decl? cut (spc decl cut)* spc? eof
  decl = syntax | rules
  syntax = 'Ocean::Syntax' cut spc symver inherit spc grammar-block
  rules = 'Ocean::Rules' cut '<' language '>' spc symver inherit code-block
  inherit = ( | spc ':' cut spc symver (spc as)? (spc ',' cut spc symver (spc as)?)* )
  code-block = spc '{' cut !(eol '};' eol)* ocg.eof
  grammar-block = spc '{' cut ocg.main
  ocg.eof = eol '};' (eol | spc eol)
  language = symver
  eof = !.
};

Ocean::Rules<perl> ocean-test_1.0 : ocean-syntax {
  TOP.find = 'b';
  TOP = print "Counted ", $$.chars, ", found ", $$.found, " b and e's\n";
  TOP.chars = length($$.text);
  rules.find = 'e';
  TOP.found = $_ = $$.text; s/[^$$.find]//g; $$.found + length($_);
};
