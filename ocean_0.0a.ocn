Ocean::Syntax ocean-grammar_0.0a {
main = rule? cut (_ rule cut)* eof
rule = versym _ '=' _ expr
expr = versym
versym = ([A-Za-z] [-.A-Za-z0-9]):sym cut ('_' cut [-+.A-Za-z0-9]+)?:ver
_ = [\n\r\t ]+
eol = '\r\n' | '\n' | '\r'
eof = !.
};

Ocean::Syntax ocean-syntax_0.0a : ocean-grammar og {
main = decl? cut (_ decl cut)* _? eof
decl = syntax | rules
syntax = 'Ocean::Syntax' cut _ versym inherit _ grammar-block
rules = 'Ocean::Rules' cut '<' language '>' _ versym inherit code-block
inherit = ( | _ ':' cut _ versym (_ as)? (_ ',' cut _ versym (_ as)?)* )
code-block = _ '{' cut !(eol '};' eol)*:code og.eof
grammar-block = _ '{' cut og.main:grammar
og.eof = eol '};' (eol | _ eol)
language = versym
eof = !.
};

Ocean::Rules<perl> ocean-chars_1.0 : ocean-syntax_0.* {
TOP = print "Counted ", $$.chars, "\n";
main[0].chars = length($$.text);
};

Ocean::Rules<perl> ocean-find-bs_1.0 : ocean-syntax_0.* {
TOP.find = 'b';
TOP = print "Found ", $$.found, " b's\n";
main[0].found = $_ = $$.text; s/[^$$.find]//g; length($_);
};
